/* player.js  ‚Äî V7.2 + Vocab(Â°´Á©∫/ÊúóËÆÄ/Ë∑≥Êí≠/ÊñáÊ≥ïÁΩÆ‰∏≠) Âº∑Âåñ
   - ‰øùÁïôÂéüÊúâÔºöÂΩ±Áâá/Â≠óÂπï/Ê∏¨È©óÔºà‰Ω†ÁöÑÁèæÊúâÂØ´Ê≥ïÔºâ„ÄÅÂ∑¶ÂÅ¥Â∑•ÂÖ∑Âàó„ÄÅË∑üÈö®/ÂÅèÁßª
   - ÂñÆÂ≠óÂàÜÈ†ÅÔºö‰æãÂè•Â°´Á©∫„ÄÅüîäÊúóËÆÄ„ÄÅ‚ñ∂Ë∑≥Êí≠„ÄÅÊñáÊ≥ïÁΩÆÊñº‰æãÂè•‰∏ãÊñπÔºà‰∏çÊì†Âè≥Ê¨ÑÔºâ
   - Supabase ÂÖ¨Ê°∂ÂÑ™ÂÖà„ÄÅËÆÄ‰∏çÂà∞ÈÄÄÊú¨Âú∞ÔºàÂΩ±Áâá/Â≠óÂπï/ÂñÆÂ≠óÔºâ
=========================================================== */

(() => {
  const $ = (s, el = document) => el.querySelector(s);
  const $$ = (s, el = document) => [...el.querySelectorAll(s)];

  // -------- DOM ÂèÉÁÖßÔºàÂ∞çÈΩä‰Ω†ÁèæÊúâ player.htmlÔºâ--------
  const video      = $('#player');
  const videoWrap  = $('#videoWrap');

  // Â∑¶ÂÅ¥Â∑•ÂÖ∑Âàó
  const btnPrev        = $('#btnPrev');
  const btnPlay        = $('#btnPlay');
  const btnNext        = $('#btnNext');
  const btnReplay      = $('#btnReplay');
  const btnAutoPause   = $('#btnAutoPause');
  const btnLoopSentence= $('#btnLoopSentence');
  const btnAB          = $('#btnAB');
  const btnPointLoop   = $('#btnPointLoop');
  const btnClearLoop   = $('#btnClearLoop');
  const btnFill        = $('#btnFill');
  const speedRange     = $('#speedRange');
  const speedVal       = $('#speedVal');

  // Âè≥ÂÅ¥ÔºöÂ≠óÂπï
  const cuesBody   = $('#cuesBody');
  const cuesStatus = $('#cuesStatus');
  const chkFollow  = $('#chkFollow');
  const btnOffsetMinus = $('#btnOffsetMinus');
  const btnOffsetPlus  = $('#btnOffsetPlus');
  const offsetVal      = $('#offsetVal');

  // ÂàÜÈ†Å
  const tabs      = $$('.tab');
  const paneSub   = $('#pane-sub');
  const paneQuiz  = $('#pane-quiz');
  const paneVocab = $('#pane-vocab');
  const vocabStatus = $('#vocabStatus');
  const vocabBox    = $('#vocabBox');

  // -------- URL Query --------
  const params = new URLSearchParams(location.search);
  const slug   = params.get('slug') || 'mid-autumn';

  // -------- ÁãÄÊÖã --------
  let cues = [];           // {t,en,zh}
  let offset = 0;          // ÂÅèÁßªÁßíÊï∏ÔºàÂÖ®ÂüüÔºâ
  let follow = true;       // Ë∑üÈö®È´ò‰∫Æ
  let loopSentence = false;
  let abA = null, abB = null;
  let autoPause = false;

  // -------- Â∞èÂ∑•ÂÖ∑ --------
  const toSec = (hhmmss) => {
    if (typeof hhmmss === 'number') return hhmmss;
    const p = String(hhmmss).split(':').map(Number);
    if (p.length === 3) return p[0]*3600 + p[1]*60 + p[2];
    if (p.length === 2) return p[0]*60 + p[1];
    return Number(hhmmss) || 0;
  };
  const fmt = (sec) => {
    sec = Math.max(0, sec|0);
    const m = (sec/60)|0, s = sec%60;
    return `${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`;
  };
  const esc = (s) => String(s??'')
    .replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;');

  // --- TTS ÊúóËÆÄÔºàËã±ÊñáÔºâ---
  function speak(text, rate=1){
    try{
      const u = new SpeechSynthesisUtterance(String(text||''));
      u.lang = 'en-US';
      u.rate = rate;
      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(u);
    }catch{}
  }

  const currentIndex = () => {
    const t = video.currentTime + offset;
    let i = 0;
    while (i+1 < cues.length && cues[i+1].t <= t + 0.0001) i++;
    return i;
  };
  const highlightRow = (idx) => {
    const trs = $$('#cuesBody tr');
    trs.forEach(tr=> tr.classList.remove('active'));
    const tr = trs[idx];
    if (tr) {
      tr.classList.add('active');
      if (follow) tr.scrollIntoView({ block: 'center', behavior: 'smooth' });
    }
  };
  const seekTo = (idx, play=true) => {
    if (!cues[idx]) return;
    video.currentTime = Math.max(0, cues[idx].t - offset + 0.0001);
    highlightRow(idx);
    if (play) video.play();
  };
  const sentenceRange = (idx) => {
    if (!cues[idx]) return [0,0];
    const s = cues[idx].t;
    const e = (idx+1<cues.length ? cues[idx+1].t : s+3);
    return [s,e];
  };

  // ================== Supabase ÂÑ™ÂÖà + Fallback ==================
  let supa = null;
  (async () => {
    try { const m = await import('./videos/js/supa.js'); supa = m?.supa ?? null; }
    catch { supa = null; }
  })();

  const getPublicUrl = (bucket, path) => {
    if (!supa) return null;
    try { const { data } = supa.storage.from(bucket).getPublicUrl(path);
      return data?.publicUrl || null;
    } catch { return null; }
  };

  // ÂΩ±ÁâáÔºöStorage > Êú¨Âú∞
  const resolveVideoUrl = async (sg) => {
    if (supa) {
      const u1 = getPublicUrl('videos', `${sg}.mp4`);
      if (u1) return u1;
    }
    return `./videos/${sg}.mp4`;
  };

  // Â≠óÂπïÔºöStorage cues/<slug>.json > Êú¨Âú∞ data/cues-<slug>.json
  const resolveCues = async (sg) => {
    if (supa) {
      const u = getPublicUrl('cues', `${sg}.json`);
      if (u) {
        try {
          const rsp = await fetch(u, { cache:'no-store' });
          if (rsp.ok) {
            const json = await rsp.json();
            return (json||[]).map(r=>({ t: toSec(r.time), en:r.en||'', zh:r.zh||'' }));
          }
        } catch {}
      }
    }
    try {
      const rsp = await fetch(`./data/cues-${sg}.json`, { cache:'no-store' });
      if (rsp.ok) {
        const json = await rsp.json();
        return (json||[]).map(r=>({ t: toSec(r.time), en:r.en||'', zh:r.zh||'' }));
      }
    } catch {}
    return [];
  };

  // ÂñÆÂ≠óÔºöStorage vocab/<slug>.json > Êú¨Âú∞ data/vocab-<slug>.json
  const resolveVocab = async (sg) => {
    if (supa) {
      const u = getPublicUrl('vocab', `${sg}.json`);
      if (u) {
        try { const rsp = await fetch(u, { cache:'no-store' }); if (rsp.ok) return await rsp.json(); } catch {}
      }
    }
    try { const rsp = await fetch(`./data/vocab-${sg}.json`, { cache:'no-store' }); if (rsp.ok) return await rsp.json(); } catch {}
    return null;
  };

  // ======================== ËºâÂÖ•ÊµÅÁ®ã ============================
  async function loadAll() {
    // ÂΩ±Áâá
    video.src = await resolveVideoUrl(slug);
    video.addEventListener('error', () => {
      if (cuesStatus) cuesStatus.textContent = `‚ö†Ô∏è ÁÑ°Ê≥ïËºâÂÖ•ÂΩ±Áâá`;
    }, { once:true });

    // Â≠óÂπï
    cues = await resolveCues(slug);
    renderCues();

    // ÂñÆÂ≠óÔºàÂç≥ËºâÔºâ
    loadVocabUI();
  }

  // ------------------ Â≠óÂπïË°® -------------------
  function renderCues() {
    if (!cuesBody) return;
    cuesBody.innerHTML = '';
    if (!cues.length) { if(cuesStatus) cuesStatus.textContent = '‚ö†Ô∏è Êü•ÁÑ°Â≠óÂπïË≥áÊñô'; return; }
    if (cuesStatus) cuesStatus.textContent = '';

    cuesBody.innerHTML = cues.map((c,i)=>`
      <tr data-i="${i}">
        <td class="muted" style="width:80px">${c.t?fmt(c.t):''}</td>
        <td>${esc(c.en)}</td>
        <td style="width:40%">${esc(c.zh)}</td>
      </tr>
    `).join('');

    // ÈªûÂàóË∑≥Êí≠
    $$('#cuesBody tr').forEach(tr=> tr.addEventListener('click', ()=>{
      const i = +tr.dataset.i;
      if (cuesBody.dataset.pointloop === '1') {
        loopSentence = true;
        btnLoopSentence?.classList.add('green');
      }
      seekTo(i, true);
    }));
  }

  // =================== ÂñÆÂ≠óÂàÜÈ†ÅÔºàÂ°´Á©∫+ÊúóËÆÄ+Ë∑≥Êí≠+ÊñáÊ≥ïÁΩÆ‰∏≠Ôºâ ===================
  async function loadVocabUI(){
    if (!paneVocab) return;

    // ÂÆπÂô®‰øùÈö™
    let vStatus = vocabStatus || $('#vocabStatus');
    let vBox    = vocabBox    || $('#vocabBox');
    if (!vStatus){
      vStatus = document.createElement('div');
      vStatus.id='vocabStatus';
      paneVocab.appendChild(vStatus);
    }
    if (!vBox){
      vBox = document.createElement('div');
      vBox.id='vocabBox';
      paneVocab.appendChild(vBox);
    }

    // ËÆÄË≥áÊñô
    vStatus.textContent = 'ËºâÂÖ•‰∏≠‚Ä¶';
    const list = await resolveVocab(slug);
    if (!list || !list.length){ 
      vStatus.textContent='‚ö†Ô∏è Êü•ÁÑ°ÂñÆÂ≠óË≥áÊñô';
      vBox.innerHTML='';
      return; 
    }
    vStatus.textContent='';

    // Â∞èÂ∑•ÂÖ∑ÔºöÈÅÆÁΩ©‰æãÂè•„ÄÅË∑≥Êí≠
    const maskSentence = (w, s) => {
      const word = String(w||'').trim();
      let txt = String(s||'');
      if (!word) return txt;
      const re = new RegExp(`\\b${word.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\$&')}\\b`, 'ig');
      return txt.replace(re, '_____');
    };
    const go = (mmss) => {
      if(!video) return;
      const toS = (x)=>{
        if(typeof x==='number') return x;
        const p = String(x).split(':').map(Number);
        if(p.length===3) return p[0]*3600+p[1]*60+p[2];
        if(p.length===2) return p[0]*60+p[1];
        return Number(x)||0;
      };
      video.currentTime = Math.max(0,toS(mmss));
      video.play();
    };

    // ÁâàÈù¢
    vBox.innerHTML = `
      <style>
        .voc-row{display:grid;grid-template-columns:120px 1fr 280px;gap:12px;padding:12px 10px;border-bottom:1px solid #14243b}
        .voc-time{display:flex;align-items:center;gap:8px;color:#9fb3d9}
        .voc-time .btn{border:1px solid #26406b;background:#0f223b;color:#dbe7ff;border-radius:8px;padding:4px 8px;cursor:pointer}
        .voc-core{min-width:0}
        .voc-sent{line-height:1.6}
        .voc-ipt{margin-top:6px;display:flex;gap:8px;align-items:center;flex-wrap:wrap}
        .voc-ipt input{padding:8px 10px;border:1px solid #334155;border-radius:8px;background:#0f223b;color:#dbe7ff;min-width:180px}
        .voc-ipt .ok{color:#5bd3c7}
        .voc-ipt .ng{color:#ff6b6b}
        .voc-gram{margin-top:6px;color:#9fb3d9;font-size:13px}
        .voc-right{border:1px solid #172a4a;background:#0f1a33;border-radius:10px;padding:10px}
        .voc-word{display:flex;align-items:center;gap:8px;font-weight:700;font-size:18px}
        .voc-pos{color:#9fb3d9;font-size:13px}
        .voc-zh{margin-top:6px}
        .voc-en{margin-top:2px;color:#9fb3d9;font-size:13px}
        .voc-actions{margin-top:8px;display:flex;gap:8px}
        .voc-actions .btn{border:1px solid #26406b;background:#0f223b;color:#dbe7ff;border-radius:8px;padding:4px 8px;cursor:pointer}
        @media(max-width:980px){ .voc-row{grid-template-columns:1fr} .voc-right{order:3} }
      </style>
      <div id="vocList"></div>
    `;
    const listBox = $('#vocList', vBox);

    // Ê∏≤ÊüìÊØè‰∏ÄÁ≠Ü
    list.forEach((v)=>{
      const row = document.createElement('div');
      row.className = 'voc-row';

      // Â∑¶ÔºöÊôÇÈñì/Ë∑≥Êí≠
      const left = document.createElement('div');
      left.className = 'voc-time';
      left.innerHTML = `
        <button class="btn" data-act="jump">‚ñ∂</button>
        <span class="time-link" style="cursor:pointer;text-decoration:underline;">${(v.time||'').toString()}</span>
      `;

      // ‰∏≠Ôºö‰æãÂè•ÔºàÂ°´Á©∫Ôºâ+ ÊñáÊ≥ïÔºàÁΩÆ‰∏≠Ê¨ÑÔºâ
      const core = document.createElement('div');
      core.className = 'voc-core';
      const example = v.example || v.en || ''; // Ê≤í example Â∞±Áî®Ëã±ÊñáËß£Èáã
      core.innerHTML = `
        <div class="voc-sent">${esc(maskSentence(v.word, example))}</div>
        <div class="voc-ipt">
          <input type="text" placeholder="Ëº∏ÂÖ•ÈÄôÂÄãÁ©∫Ê†ºÁöÑÂñÆÂ≠ó‚Ä¶" aria-label="answer">
          <button class="btn" data-act="check">Ê™¢Êü•</button>
          <span class="msg"></span>
          <button class="btn" data-act="reveal">È°ØÁ§∫Á≠îÊ°à</button>
        </div>
        ${v.grammar ? `<div class="voc-gram">ÊñáÊ≥ïÔºö${esc(v.grammar)}</div>` : ``}
      `;

      // Âè≥ÔºöÁ≠îÊ°àÂç° + ÊúóËÆÄ
      const right = document.createElement('div');
      right.className = 'voc-right';
      right.innerHTML = `
        <div class="voc-word">
          <span>${esc(v.word||'')}</span>
          <button class="btn" data-act="speak" title="ÊúóËÆÄ üîä">üîä</button>
        </div>
        <div class="voc-pos">${esc(v.pos||'')}</div>
        ${v.zh ? `<div class="voc-zh">${esc(v.zh)}</div>` : ``}
        ${v.en ? `<div class="voc-en">${esc(v.en)}</div>` : ``}
        <div class="voc-actions">
          <button class="btn" data-act="jump">Ë∑≥Âà∞ÁâáÊÆµ</button>
        </div>
      `;

      // Ë°åÁÇ∫
      row.addEventListener('click', (e)=>{
        const act = e.target?.dataset?.act;
        if (!act) return;

        if (act==='jump'){ go(v.time||0); }
        else if (act==='speak'){ speak(v.word || v.en || v.example || v.zh || ''); }
        else if (act==='check'){
          const ipt = core.querySelector('input');
          const msg = core.querySelector('.msg');
          const ok = String(ipt.value||'').trim().toLowerCase()
                      === String(v.word||'').trim().toLowerCase();
          msg.textContent = ok ? '‚úÖ Ê≠£Á¢∫ÔºÅ' : '‚ùå ÂÜçË©¶Ë©¶';
          msg.className = `msg ${ok?'ok':'ng'}`;
        }
        else if (act==='reveal'){
          const ipt = core.querySelector('input');
          ipt.value = v.word||'';
          const msg = core.querySelector('.msg');
          msg.textContent = 'ÔºàÂ∑≤Â°´ÂÖ•Á≠îÊ°àÔºâ';
          msg.className = 'msg';
        }
      });

      // ÈªûÊôÇÈñìË∑≥Êí≠
      left.querySelector('.time-link').addEventListener('click', ()=> go(v.time||0));

      row.appendChild(left);
      row.appendChild(core);
      row.appendChild(right);
      listBox.appendChild(row);
    });
  }

  // =================== ÊéßÂà∂Âàó ===================
  if (speedRange) speedRange.addEventListener('input', ()=>{
    const r = Number(speedRange.value) || 1;
    video.playbackRate = r;
    if (speedVal) speedVal.textContent = `${r.toFixed(2)}x`;
  });

  btnPlay?.addEventListener('click', ()=>{ if(video.paused) video.play(); else video.pause(); });
  btnPrev?.addEventListener('click', ()=> seekTo(Math.max(0,currentIndex()-1),true));
  btnNext?.addEventListener('click', ()=> seekTo(Math.min(cues.length-1,currentIndex()+1),true));

  btnReplay?.addEventListener('click', ()=>{
    loopSentence = true;
    btnLoopSentence?.classList.add('green');
    seekTo(currentIndex(), true);
  });

  btnLoopSentence?.addEventListener('click', ()=>{
    loopSentence = !loopSentence;
    btnLoopSentence.classList.toggle('green', loopSentence);
  });

  btnAB?.addEventListener('click', ()=>{
    const now = video.currentTime + offset;
    if (abA === null) { abA = now; abB = null; btnAB.classList.add('green'); btnAB.textContent='üÖ± Ë®≠ÂÆö BÔºàÂÜçÊ¨°ÊåâÂèñÊ∂àÔºâ'; }
    else if (abB === null) { abB = now; if(abB<abA) [abA,abB]=[abB,abA]; btnAB.textContent='üÖ∞üÖ± A-B Âæ™Áí∞‰∏≠ÔºàÂÜçÊ¨°ÊåâÂèñÊ∂àÔºâ'; }
    else { abA = abB = null; btnAB.classList.remove('green'); btnAB.textContent='üÖ∞üÖ± A-B Âæ™Áí∞'; }
  });

  btnPointLoop?.addEventListener('click', ()=>{
    btnPointLoop.classList.toggle('green');
    if (cuesBody) cuesBody.dataset.pointloop = btnPointLoop.classList.contains('green') ? '1' : '';
  });

  btnClearLoop?.addEventListener('click', ()=>{
    loopSentence = false; abA = abB = null;
    btnLoopSentence?.classList.remove('green');
    btnAB?.classList.remove('green');
    if (btnAB) btnAB.textContent='üÖ∞üÖ± A-B Âæ™Áí∞';
  });

  btnFill?.addEventListener('click', ()=>{
    // ÂàáÊèõÂ°´ÊªøÔºö#videoWrap.fill
    videoWrap?.classList.toggle('fill');
  });

  btnOffsetMinus?.addEventListener('click', ()=>{ offset -= 0.5; if(offsetVal) offsetVal.textContent=`${offset.toFixed(1)}s`; });
  btnOffsetPlus ?.addEventListener('click', ()=>{ offset += 0.5; if(offsetVal) offsetVal.textContent=`${offset.toFixed(1)}s`; });
  chkFollow    ?.addEventListener('change', ()=> follow = chkFollow.checked);
  btnAutoPause ?.addEventListener('click', ()=>{ autoPause=!autoPause; btnAutoPause.classList.toggle('green',autoPause); });

  // Êí≠Êîæ‰∫ã‰ª∂ÔºàÈ´ò‰∫Æ„ÄÅÈÄêÂè•Êö´ÂÅú„ÄÅÂñÆÂè•Âæ™Áí∞„ÄÅA-B Âæ™Áí∞Ôºâ
  video.addEventListener('timeupdate', ()=>{
    if (!cues.length) return;
    const i = currentIndex();
    highlightRow(i);
    const t = video.currentTime + offset;

    if (autoPause) {
      const [, e] = sentenceRange(i);
      if (t >= e - 0.02 && t < e + 0.2) video.pause();
    }
    if (loopSentence) {
      const [s, e] = sentenceRange(i);
      if (t >= e - 0.02) {
        video.currentTime = Math.max(0, s - offset + 0.0001);
        video.play();
      }
    }
    if (abA !== null && abB !== null) {
      if (t < abA || t >= abB - 0.02) {
        video.currentTime = Math.max(0, abA - offset + 0.0001);
        video.play();
      }
    }
  });

  // ÂàÜÈ†ÅÂàáÊèõ
  tabs.forEach(tab=>{
    tab.addEventListener('click', ()=>{
      tabs.forEach(x=>x.classList.remove('active'));
      tab.classList.add('active');
      const name = tab.dataset.tab;
      if (paneSub)   paneSub.style.display   = (name==='sub')  ? '' : 'none';
      if (paneQuiz)  paneQuiz.style.display  = (name==='quiz') ? '' : 'none';
      if (paneVocab) paneVocab.style.display = (name==='vocab')? '' : 'none';
    });
  });

  // ÂïüÂãï
  (async function init(){
    const r = Number(speedRange?.value) || 1;
    video.playbackRate = r;
    if (speedVal) speedVal.textContent = `${r.toFixed(2)}x`;
    await loadAll();
  })();
})();
/* =====================  QUIZ v2  ===================== */
/* ÈúÄÊ±ÇÔºö
 *  - È°åÂ∫´Ë∑ØÂæëÔºö./data/quiz-<slug>.json
 *  - È°åÂûãÔºöMCQ(ÂñÆÈÅ∏)„ÄÅSA(Á∞°Á≠î). Ê¨Ñ‰ΩçÂèØÁî® question/options/answer/explanation
 *    Ëã•ÊòØËàäÊ†ºÂºè (q/choices/ans/ex)Ôºånormalize ÊúÉËΩâÊàêÁµ±‰∏ÄÊ†ºÂºè„ÄÇ
 *  - ÊØèÈ°åÂç≥ÊôÇÂà§Êñ∑ÔºõÊú™‰ΩúÁ≠îÁÆóÈåØ„ÄÇ
 *  - ‰∫§Âç∑ÂæåÔºöÂá∫Á∏ΩÂàÜ(100)„ÄÅË©ïË™û„ÄÅÈ°ØÁ§∫„ÄåÂàóÂç∞ÊàêÁ∏æÂñÆ / È°ØÁ§∫Á≠îÊ°à„Äç„ÄÇ
 *  - ÂàóÂç∞ÔºöA4 Áõ¥ÂºèÔºåÂê´ LOGO ÂèäÊ®ôÈ°å„ÄÇ
 */

(function quizBlock() {
  const $=(s,el=document)=>el.querySelector(s);
  const $$=(s,el=document)=>[...el.querySelectorAll(s)];

  // ÈÄôÂπæÂÄãÂÖÉÁ¥†‰∏ÄÂæãÊ≤øÁî®‰Ω†ÂéüÊú¨ÁöÑ idÔºõÊâæ‰∏çÂà∞Â∞±‰∏çÁ∂ÅÂÆöÔºàÈÅøÂÖçÁ†¥ÁâàÔºâ
  const quizListEl    = $('#quizList');
  const submitBtn     = $('#btnSubmitQuiz');      // ‰∫§Âç∑
  const printBtn      = $('#btnPrintQuiz');       // ÂàóÂç∞ÊàêÁ∏æÂñÆ
  const showAnsBtn    = $('#btnShowAnswer');      // È°ØÁ§∫ÂÖ®ÈÉ®Á≠îÊ°à
  const quizMetaEl    = $('#quizMeta');           // È°ØÁ§∫„ÄåÂÖ± X È°å / ÂàÜÊï∏ / Ë©ïË™û„Äç
  const statusLabel   = $('#quizStatus');         // Ëã•‰Ω†È†ÅÈù¢Êúâ„Äå(Â∞öÊú™ËºâÂÖ•)„Äç‰πãÈ°ûÁöÑÂçÄÂ°ä

  // Ëã•Ê≤íÊúâÊ∏ÖÂñÆÂÆπÂô®ÔºåÁõ¥Êé•Èõ¢ÈñãÔºà‰∏çÂΩ±ÈüøÂÖ∂‰ªñÂàÜÈ†ÅÔºâ
  if (!quizListEl) {
    console.warn('[quiz] #quizList not found');
    return;
  }

  const params = new URLSearchParams(location.search);
  const slug   = params.get('slug') || 'mid-autumn';

  // È°åÁõÆÊ®ôÊ∫ñÂåñ
  const normalizeQuestion = (q, i) => ({
    id: (i+1),
    type: (q.type ? q.type.toUpperCase() : (q.options || q.choices ? 'MCQ' : 'SA')),
    question: q.question || q.q || '',
    options:  q.options || q.choices || [],
    answer:   (typeof q.answer==='string' ? q.answer : (q.ans ?? '')),
    explanation: q.explanation || q.ex || ''
  });

  async function loadQuizData() {
    try {
      const r = await fetch(`./data/quiz-${slug}.json`, { cache: 'no-store' });
      if (!r.ok) throw new Error(r.status);
      const raw = await r.json();
      return raw.map(normalizeQuestion);
    } catch (e) {
      console.error('[quiz] load fail', e);
      return [];
    }
  }

  // ÊØèÈ°å row ÁöÑÂç≥ÊôÇÈ°ØÁ§∫ÔºöÂ∞ç/ÈåØ + Ê≠£Ëß£
  function setVerdict(row, ok, solutionText) {
    const verdict = row.querySelector('.q-verdict');
    verdict.textContent = ok ? '‚úÖ Ê≠£Á¢∫' : '‚ùå ÈåØË™§';
    verdict.style.color = ok ? '#41d6c3' : '#ff6b6b';

    // Ê≠£Ëß£
    const sol = row.querySelector('.q-solution');
    sol.innerHTML = solutionText ? `Ê≠£Ëß£Ôºö<b>${solutionText}</b>` : '';
  }

  // Ê∏≤ÊüìÂÖ®ÈÉ®È°åÁõÆ
  function renderQuiz(questions) {
    if (statusLabel) statusLabel.textContent = '';
    quizListEl.innerHTML = '';
    if (quizMetaEl) quizMetaEl.textContent = `ÂÖ± ${questions.length} È°åÔºàÂñÆÈÅ∏ / Á∞°Á≠îÔºâ`;

    questions.forEach((q, idx) => {
      const li = document.createElement('li');
      li.className = 'quiz-item';
      li.style.margin='18px 0';

      // È°åÂππ
      const stem = document.createElement('div');
      stem.className = 'q-stem';
      stem.style.fontWeight='700';
      stem.style.marginBottom='10px';
      stem.textContent = `${q.id}. ${q.question}`;
      li.appendChild(stem);

      // ‰∫íÂãïÂçÄ
      const box = document.createElement('div');
      box.className='q-box';
      li.appendChild(box);

      // verdict / solution
      const verdict = document.createElement('div');
      verdict.className='q-verdict';
      verdict.style.margin = '8px 0 2px';
      li.appendChild(verdict);

      const solution = document.createElement('div');
      solution.className='q-solution';
      solution.style.margin = '2px 0 0';
      li.appendChild(solution);

      // Ë≥áÊñôÊ¨Ñ‰ΩçÔºà‰ΩúÁ≠îÔºâ
      q.userAnswer = null; // ‰ΩøÁî®ËÄÖ‰ΩúÁ≠î
      q.correct    = false; // ÊòØÂê¶Ê≠£Á¢∫

      if (q.type === 'MCQ') {
        // ÈÅ∏È†ÖÁæ§
        q.options.forEach(opt => {
          const label = document.createElement('label');
          label.style.display = 'block';
          label.style.cursor  = 'pointer';
          label.style.margin  = '6px 0';

          const radio = document.createElement('input');
          radio.type  = 'radio';
          radio.name  = `q_${idx}`;
          radio.value = opt;
          radio.style.marginRight='8px';

          label.appendChild(radio);
          label.appendChild(document.createTextNode(opt));
          box.appendChild(label);

          radio.addEventListener('change', () => {
            q.userAnswer = radio.value;
            q.correct    = (q.userAnswer.trim() === q.answer.trim());
            const solText = `${q.answer}${q.explanation ? ' ‚Äî ' + q.explanation : ''}`;
            setVerdict(li, q.correct, q.correct ? '' : solText);
          });
        });

      } else { // SA Á∞°Á≠î
        const line = document.createElement('div');
        line.style.display='flex';
        line.style.gap='8px';
        line.style.alignItems='center';

        const ipt = document.createElement('input');
        ipt.type='text';
        ipt.placeholder='Ë´ãËº∏ÂÖ•Á≠îÊ°à‚Ä¶';
        ipt.style.cssText='padding:8px 10px;border:1px solid #334155;border-radius:8px;background:#0f223b;color:#e7eaf3;min-width:250px';
        line.appendChild(ipt);

        const btn = document.createElement('button');
        btn.className='btn';
        btn.textContent='Ê™¢Êü•';
        line.appendChild(btn);

        box.appendChild(line);

        const judge = () => {
          q.userAnswer = (ipt.value || '').trim();
          const norm = s => s.toLowerCase().replace(/\s+/g,'').replace(/[^\w]/g,'');
          q.correct = norm(q.userAnswer) === norm(q.answer);
          const solText = `${q.answer}${q.explanation ? ' ‚Äî ' + q.explanation : ''}`;
          setVerdict(li, q.correct, q.correct ? '' : solText);
        };
        btn.addEventListener('click', judge);
        ipt.addEventListener('keydown', e=>{ if(e.key==='Enter') judge(); });
      }

      quizListEl.appendChild(li);
    });

    // Á∂ÅÂÆö‰∫§Âç∑ / È°ØÁ§∫Á≠îÊ°à / ÂàóÂç∞
    if (submitBtn) {
      submitBtn.onclick = () => {
        const total = questions.length;
        const correct = questions.reduce((n,q)=>n + (q.correct ? 1 : 0), 0);
        const score = Math.round((correct/total) * 100);

        // 60 ÂàÜÂèäÊ†ºÔºõ‰∫îÁµÑÊ≠£ÂêëÔºèÂª∫Ë®≠ÊÄßË©ïË™ûÔºå‰æùÂàÜÊï∏ÂçÄÈñìÂ•óÁî®
        const commentsOK = [
          'Ë°®ÁèæÂæàÁ©©ÔºÅÁπºÁ∫å‰øùÊåÅ üòä',
          'ÊÄùËÄÉÈÇèËºØÊ∏ÖÊ•öÔºåËÆöÔºÅ',
          'Â≠∏ÁøíÁØÄÂ•èÊéåÊè°ÂæóÂæàÂ•ΩÔºÅ',
          'Ë∂ä‰æÜË∂ä‰∏äÊâã‰∫ÜÔºåÂÜçÊåëÊà∞Êõ¥Èõ£ÁöÑÂêßÔºÅ',
          'ÊåÅÁ∫åÈÄ≤Ê≠•‰∏≠ÔºåÁÇ∫‰Ω†ÂñùÈááÔºÅ'
        ];
        const commentsNG = [
          'Âü∫Á§éËßÄÂøµÂÜçË§áÁøí‰∏ÄÊ¨°ÊúÉÊõ¥Â•Ω üëç',
          'ÂÖàÊääÈóúÈçµÂ≠óÊäìÂá∫‰æÜÂÜç‰ΩúÁ≠îË©¶Ë©¶ÁúãÔºÅ',
          'Âª∫Ë≠∞Êê≠ÈÖçÂΩ±ÁâáÈÄêÂè•ÁêÜËß£ÔºåÊïàÊûúÊõ¥‰Ω≥„ÄÇ',
          'ÈåØÈ°åÂÖàÊ®ôË®òÔºå‰∏ãÊ¨°ÈáçÈªûÁ∑¥Áøí„ÄÇ',
          'ÂÖàÊ±ÇÁ©©ÂÜçÊ±ÇÂø´ÔºåÊÖ¢ÊÖ¢‰æÜÊúÉÊõ¥Â•Ω„ÄÇ'
        ];
        const comment = score >= 60
          ? commentsOK[score === 100 ? 4 : Math.min(4, Math.floor((score-60)/10))]
          : commentsNG[Math.min(4, Math.floor((60-score)/10))];

        if (quizMetaEl) {
          quizMetaEl.innerHTML =
            `‰Ω†ÁöÑÂàÜÊï∏Ôºö<b>${score} / 100</b>„ÄÄ${score>=60?'‚úÖÂèäÊ†º':'‚ùåÊú™ÂèäÊ†º'}„ÄÄ<span style="color:#9fb3d9">${comment}${score===100?'„ÄÄüåüÂ§™Âº∑‰∫ÜÔºÅÈõÜÊªø‰∫îÂºµÊªøÂàÜÂèØÂÖåÊèõ 1 ÁµÑ LINE Ë°®ÊÉÖË≤ºÔºÅ':''}</span>`;
        }

        // ‰∫§Âç∑ÂæåÊâçÈ°ØÁ§∫ÂäüËÉΩ
        if (printBtn)   printBtn.style.display   = 'inline-block';
        if (showAnsBtn) showAnsBtn.style.display = 'inline-block';
      };
    }

    if (showAnsBtn) {
      showAnsBtn.style.display = 'none'; // ‰∫§Âç∑ÂâçÂÖàÈö±Ëóè
      showAnsBtn.onclick = () => {
        $$('.quiz-item').forEach((row,i)=>{
          const q = questions[i];
          if (!q) return;
          const solText = `${q.answer}${q.explanation ? ' ‚Äî ' + q.explanation : ''}`;
          // Ëã•Â∞öÊú™Ê≠£Á¢∫ÔºåÂ∞±È°ØÁ§∫Ê≠£Ëß£
          if (!q.correct) setVerdict(row, false, solText);
        });
      };
    }

    if (printBtn) {
      printBtn.style.display = 'none'; // ‰∫§Âç∑ÂâçÂÖàÈö±Ëóè
      printBtn.onclick = () => openPrintWindow(questions);
    }
  }

  // ÈñãÊñ∞Ë¶ñÁ™óÂàóÂç∞ÔºàA4 Áõ¥ÂºèÔºâ
  function openPrintWindow(questions) {
    const total = questions.length;
    const correct = questions.reduce((n,q)=>n + (q.correct ? 1 : 0), 0);
    const score = Math.round((correct/total) * 100);

    const html = `
<!doctype html><html><head><meta charset="utf-8">
<title>ÊàêÁ∏æÂñÆ - ${slug}</title>
<style>
  @page { size: A4 portrait; margin: 18mm 16mm; }
  body { font-family: system-ui,-apple-system,Segoe UI,Roboto,Noto Sans,Arial,sans-serif; color:#111; }
  .header { display:flex; align-items:center; justify-content:space-between; margin-bottom:16px; }
  .logo { width:120px; height:40px; border:1px dashed #bbb; display:flex; align-items:center; justify-content:center; color:#999; }
  h1 { font-size:20px; margin:0; }
  .meta { margin:8px 0 18px; }
  ol { padding-left: 18px; }
  li { margin: 10px 0 14px; }
  .q { font-weight:700; }
  .opt { margin-left: 6px; }
  .ans { margin: 4px 0 0 0; color:#444; }
  .hr { margin: 14px 0; height:1px; background:#ddd; }
</style>
</head><body>
  <div class="header">
    <div class="logo">LOGO</div>
    <div style="text-align:right">
      <h1>Ëã±Ë™ûÂΩ±ÁâáÊ∏¨È©óÊàêÁ∏æÂñÆ</h1>
      <div class="meta">ÂΩ±ÁâáÔºö${slug}„ÄÄÂàÜÊï∏Ôºö<b>${score}/100</b></div>
    </div>
  </div>
  <div class="hr"></div>
  <ol>
    ${questions.map(q=>`
      <li>
        <div class="q">${escapeHTML(q.question)}</div>
        ${q.type==='MCQ'
          ? q.options.map(o=>`<div class="opt">- ${escapeHTML(o)}</div>`).join('')
          : `<div class="opt">ÔºàÁ∞°Á≠îÔºâ</div>`}
        <div class="ans">‰ΩúÁ≠îÔºö${escapeHTML(q.userAnswer ?? 'ÔºàÊú™‰ΩúÁ≠îÔºâ')}</div>
        <div class="ans">Ê≠£Ëß£Ôºö<b>${escapeHTML(q.answer)}</b>${q.explanation? ' ‚Äî '+escapeHTML(q.explanation):''}</div>
      </li>`).join('')}
  </ol>
  <script>window.print()</script>
</body></html>`;
    const w = window.open('', '_blank');
    w.document.open(); w.document.write(html); w.document.close();
  }

  function escapeHTML(s){ return String(s??'').replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;'); }

  // ÂïüÂãï
  (async () => {
    if (statusLabel) statusLabel.textContent = 'ËºâÂÖ•‰∏≠‚Ä¶';
    const qs = await loadQuizData();
    if (!qs.length) {
      if (statusLabel) statusLabel.textContent = '‚ö†Ô∏è Êü•ÁÑ°È°åÁõÆ';
      if (quizMetaEl) quizMetaEl.textContent = '';
      quizListEl.innerHTML = '';
      return;
    }
    renderQuiz(qs);
    if (statusLabel) statusLabel.textContent = '';
  })();
})();

































































