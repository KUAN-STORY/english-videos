/* player.js  ‚Äî V7.2 + Vocab(Â°´Á©∫/ÊúóËÆÄ/Ë∑≥Êí≠/ÊñáÊ≥ïÁΩÆ‰∏≠) Âº∑Âåñ
   - ‰øùÁïôÂéüÊúâÔºöÂΩ±Áâá/Â≠óÂπï/Ê∏¨È©óÔºà‰Ω†ÁöÑÁèæÊúâÂØ´Ê≥ïÔºâ„ÄÅÂ∑¶ÂÅ¥Â∑•ÂÖ∑Âàó„ÄÅË∑üÈö®/ÂÅèÁßª
   - ÂñÆÂ≠óÂàÜÈ†ÅÔºö‰æãÂè•Â°´Á©∫„ÄÅüîäÊúóËÆÄ„ÄÅ‚ñ∂Ë∑≥Êí≠„ÄÅÊñáÊ≥ïÁΩÆÊñº‰æãÂè•‰∏ãÊñπÔºà‰∏çÊì†Âè≥Ê¨ÑÔºâ
   - Supabase ÂÖ¨Ê°∂ÂÑ™ÂÖà„ÄÅËÆÄ‰∏çÂà∞ÈÄÄÊú¨Âú∞ÔºàÂΩ±Áâá/Â≠óÂπï/ÂñÆÂ≠óÔºâ
=========================================================== */

(() => {
  const $ = (s, el = document) => el.querySelector(s);
  const $$ = (s, el = document) => [...el.querySelectorAll(s)];

  // -------- DOM ÂèÉÁÖßÔºàÂ∞çÈΩä‰Ω†ÁèæÊúâ player.htmlÔºâ--------
  const video      = $('#player');
  const videoWrap  = $('#videoWrap');

  // Â∑¶ÂÅ¥Â∑•ÂÖ∑Âàó
  const btnPrev        = $('#btnPrev');
  const btnPlay        = $('#btnPlay');
  const btnNext        = $('#btnNext');
  const btnReplay      = $('#btnReplay');
  const btnAutoPause   = $('#btnAutoPause');
  const btnLoopSentence= $('#btnLoopSentence');
  const btnAB          = $('#btnAB');
  const btnPointLoop   = $('#btnPointLoop');
  const btnClearLoop   = $('#btnClearLoop');
  const btnFill        = $('#btnFill');
  const speedRange     = $('#speedRange');
  const speedVal       = $('#speedVal');

  // Âè≥ÂÅ¥ÔºöÂ≠óÂπï
  const cuesBody   = $('#cuesBody');
  const cuesStatus = $('#cuesStatus');
  const chkFollow  = $('#chkFollow');
  const btnOffsetMinus = $('#btnOffsetMinus');
  const btnOffsetPlus  = $('#btnOffsetPlus');
  const offsetVal      = $('#offsetVal');

  // ÂàÜÈ†Å
  const tabs      = $$('.tab');
  const paneSub   = $('#pane-sub');
  const paneQuiz  = $('#pane-quiz');
  const paneVocab = $('#pane-vocab');
  const vocabStatus = $('#vocabStatus');
  const vocabBox    = $('#vocabBox');

  // -------- URL Query --------
  const params = new URLSearchParams(location.search);
  const slug   = params.get('slug') || 'mid-autumn';

  // -------- ÁãÄÊÖã --------
  let cues = [];           // {t,en,zh}
  let offset = 0;          // ÂÅèÁßªÁßíÊï∏ÔºàÂÖ®ÂüüÔºâ
  let follow = true;       // Ë∑üÈö®È´ò‰∫Æ
  let loopSentence = false;
  let abA = null, abB = null;
  let autoPause = false;

  // -------- Â∞èÂ∑•ÂÖ∑ --------
  const toSec = (hhmmss) => {
    if (typeof hhmmss === 'number') return hhmmss;
    const p = String(hhmmss).split(':').map(Number);
    if (p.length === 3) return p[0]*3600 + p[1]*60 + p[2];
    if (p.length === 2) return p[0]*60 + p[1];
    return Number(hhmmss) || 0;
  };
  const fmt = (sec) => {
    sec = Math.max(0, sec|0);
    const m = (sec/60)|0, s = sec%60;
    return `${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`;
  };
  const esc = (s) => String(s??'')
    .replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;');

  // --- TTS ÊúóËÆÄÔºàËã±ÊñáÔºâ---
  function speak(text, rate=1){
    try{
      const u = new SpeechSynthesisUtterance(String(text||''));
      u.lang = 'en-US';
      u.rate = rate;
      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(u);
    }catch{}
  }

  const currentIndex = () => {
    const t = video.currentTime + offset;
    let i = 0;
    while (i+1 < cues.length && cues[i+1].t <= t + 0.0001) i++;
    return i;
  };
  const highlightRow = (idx) => {
    const trs = $$('#cuesBody tr');
    trs.forEach(tr=> tr.classList.remove('active'));
    const tr = trs[idx];
    if (tr) {
      tr.classList.add('active');
      if (follow) tr.scrollIntoView({ block: 'center', behavior: 'smooth' });
    }
  };
  const seekTo = (idx, play=true) => {
    if (!cues[idx]) return;
    video.currentTime = Math.max(0, cues[idx].t - offset + 0.0001);
    highlightRow(idx);
    if (play) video.play();
  };
  const sentenceRange = (idx) => {
    if (!cues[idx]) return [0,0];
    const s = cues[idx].t;
    const e = (idx+1<cues.length ? cues[idx+1].t : s+3);
    return [s,e];
  };

  // ================== Supabase ÂÑ™ÂÖà + Fallback ==================
  let supa = null;
  (async () => {
    try { const m = await import('./videos/js/supa.js'); supa = m?.supa ?? null; }
    catch { supa = null; }
  })();

  const getPublicUrl = (bucket, path) => {
    if (!supa) return null;
    try { const { data } = supa.storage.from(bucket).getPublicUrl(path);
      return data?.publicUrl || null;
    } catch { return null; }
  };

  // ÂΩ±ÁâáÔºöStorage > Êú¨Âú∞
  const resolveVideoUrl = async (sg) => {
    if (supa) {
      const u1 = getPublicUrl('videos', `${sg}.mp4`);
      if (u1) return u1;
    }
    return `./videos/${sg}.mp4`;
  };

  // Â≠óÂπïÔºöStorage cues/<slug>.json > Êú¨Âú∞ data/cues-<slug>.json
  const resolveCues = async (sg) => {
    if (supa) {
      const u = getPublicUrl('cues', `${sg}.json`);
      if (u) {
        try {
          const rsp = await fetch(u, { cache:'no-store' });
          if (rsp.ok) {
            const json = await rsp.json();
            return (json||[]).map(r=>({ t: toSec(r.time), en:r.en||'', zh:r.zh||'' }));
          }
        } catch {}
      }
    }
    try {
      const rsp = await fetch(`./data/cues-${sg}.json`, { cache:'no-store' });
      if (rsp.ok) {
        const json = await rsp.json();
        return (json||[]).map(r=>({ t: toSec(r.time), en:r.en||'', zh:r.zh||'' }));
      }
    } catch {}
    return [];
  };

  // ÂñÆÂ≠óÔºöStorage vocab/<slug>.json > Êú¨Âú∞ data/vocab-<slug>.json
  const resolveVocab = async (sg) => {
    if (supa) {
      const u = getPublicUrl('vocab', `${sg}.json`);
      if (u) {
        try { const rsp = await fetch(u, { cache:'no-store' }); if (rsp.ok) return await rsp.json(); } catch {}
      }
    }
    try { const rsp = await fetch(`./data/vocab-${sg}.json`, { cache:'no-store' }); if (rsp.ok) return await rsp.json(); } catch {}
    return null;
  };

  // ======================== ËºâÂÖ•ÊµÅÁ®ã ============================
  async function loadAll() {
    // ÂΩ±Áâá
    video.src = await resolveVideoUrl(slug);
    video.addEventListener('error', () => {
      if (cuesStatus) cuesStatus.textContent = `‚ö†Ô∏è ÁÑ°Ê≥ïËºâÂÖ•ÂΩ±Áâá`;
    }, { once:true });

    // Â≠óÂπï
    cues = await resolveCues(slug);
    renderCues();

    // ÂñÆÂ≠óÔºàÂç≥ËºâÔºâ
    loadVocabUI();
  }

  // ------------------ Â≠óÂπïË°® -------------------
  function renderCues() {
    if (!cuesBody) return;
    cuesBody.innerHTML = '';
    if (!cues.length) { if(cuesStatus) cuesStatus.textContent = '‚ö†Ô∏è Êü•ÁÑ°Â≠óÂπïË≥áÊñô'; return; }
    if (cuesStatus) cuesStatus.textContent = '';

    cuesBody.innerHTML = cues.map((c,i)=>`
      <tr data-i="${i}">
        <td class="muted" style="width:80px">${c.t?fmt(c.t):''}</td>
        <td>${esc(c.en)}</td>
        <td style="width:40%">${esc(c.zh)}</td>
      </tr>
    `).join('');

    // ÈªûÂàóË∑≥Êí≠
    $$('#cuesBody tr').forEach(tr=> tr.addEventListener('click', ()=>{
      const i = +tr.dataset.i;
      if (cuesBody.dataset.pointloop === '1') {
        loopSentence = true;
        btnLoopSentence?.classList.add('green');
      }
      seekTo(i, true);
    }));
  }

  // =================== ÂñÆÂ≠óÂàÜÈ†ÅÔºàÂ°´Á©∫+ÊúóËÆÄ+Ë∑≥Êí≠+ÊñáÊ≥ïÁΩÆ‰∏≠Ôºâ ===================
  async function loadVocabUI(){
    if (!paneVocab) return;

    // ÂÆπÂô®‰øùÈö™
    let vStatus = vocabStatus || $('#vocabStatus');
    let vBox    = vocabBox    || $('#vocabBox');
    if (!vStatus){
      vStatus = document.createElement('div');
      vStatus.id='vocabStatus';
      paneVocab.appendChild(vStatus);
    }
    if (!vBox){
      vBox = document.createElement('div');
      vBox.id='vocabBox';
      paneVocab.appendChild(vBox);
    }

    // ËÆÄË≥áÊñô
    vStatus.textContent = 'ËºâÂÖ•‰∏≠‚Ä¶';
    const list = await resolveVocab(slug);
    if (!list || !list.length){ 
      vStatus.textContent='‚ö†Ô∏è Êü•ÁÑ°ÂñÆÂ≠óË≥áÊñô';
      vBox.innerHTML='';
      return; 
    }
    vStatus.textContent='';

    // Â∞èÂ∑•ÂÖ∑ÔºöÈÅÆÁΩ©‰æãÂè•„ÄÅË∑≥Êí≠
    const maskSentence = (w, s) => {
      const word = String(w||'').trim();
      let txt = String(s||'');
      if (!word) return txt;
      const re = new RegExp(`\\b${word.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\$&')}\\b`, 'ig');
      return txt.replace(re, '_____');
    };
    const go = (mmss) => {
      if(!video) return;
      const toS = (x)=>{
        if(typeof x==='number') return x;
        const p = String(x).split(':').map(Number);
        if(p.length===3) return p[0]*3600+p[1]*60+p[2];
        if(p.length===2) return p[0]*60+p[1];
        return Number(x)||0;
      };
      video.currentTime = Math.max(0,toS(mmss));
      video.play();
    };

    // ÁâàÈù¢
    vBox.innerHTML = `
      <style>
        .voc-row{display:grid;grid-template-columns:120px 1fr 280px;gap:12px;padding:12px 10px;border-bottom:1px solid #14243b}
        .voc-time{display:flex;align-items:center;gap:8px;color:#9fb3d9}
        .voc-time .btn{border:1px solid #26406b;background:#0f223b;color:#dbe7ff;border-radius:8px;padding:4px 8px;cursor:pointer}
        .voc-core{min-width:0}
        .voc-sent{line-height:1.6}
        .voc-ipt{margin-top:6px;display:flex;gap:8px;align-items:center;flex-wrap:wrap}
        .voc-ipt input{padding:8px 10px;border:1px solid #334155;border-radius:8px;background:#0f223b;color:#dbe7ff;min-width:180px}
        .voc-ipt .ok{color:#5bd3c7}
        .voc-ipt .ng{color:#ff6b6b}
        .voc-gram{margin-top:6px;color:#9fb3d9;font-size:13px}
        .voc-right{border:1px solid #172a4a;background:#0f1a33;border-radius:10px;padding:10px}
        .voc-word{display:flex;align-items:center;gap:8px;font-weight:700;font-size:18px}
        .voc-pos{color:#9fb3d9;font-size:13px}
        .voc-zh{margin-top:6px}
        .voc-en{margin-top:2px;color:#9fb3d9;font-size:13px}
        .voc-actions{margin-top:8px;display:flex;gap:8px}
        .voc-actions .btn{border:1px solid #26406b;background:#0f223b;color:#dbe7ff;border-radius:8px;padding:4px 8px;cursor:pointer}
        @media(max-width:980px){ .voc-row{grid-template-columns:1fr} .voc-right{order:3} }
      </style>
      <div id="vocList"></div>
    `;
    const listBox = $('#vocList', vBox);

    // Ê∏≤ÊüìÊØè‰∏ÄÁ≠Ü
    list.forEach((v)=>{
      const row = document.createElement('div');
      row.className = 'voc-row';

      // Â∑¶ÔºöÊôÇÈñì/Ë∑≥Êí≠
      const left = document.createElement('div');
      left.className = 'voc-time';
      left.innerHTML = `
        <button class="btn" data-act="jump">‚ñ∂</button>
        <span class="time-link" style="cursor:pointer;text-decoration:underline;">${(v.time||'').toString()}</span>
      `;

      // ‰∏≠Ôºö‰æãÂè•ÔºàÂ°´Á©∫Ôºâ+ ÊñáÊ≥ïÔºàÁΩÆ‰∏≠Ê¨ÑÔºâ
      const core = document.createElement('div');
      core.className = 'voc-core';
      const example = v.example || v.en || ''; // Ê≤í example Â∞±Áî®Ëã±ÊñáËß£Èáã
      core.innerHTML = `
        <div class="voc-sent">${esc(maskSentence(v.word, example))}</div>
        <div class="voc-ipt">
          <input type="text" placeholder="Ëº∏ÂÖ•ÈÄôÂÄãÁ©∫Ê†ºÁöÑÂñÆÂ≠ó‚Ä¶" aria-label="answer">
          <button class="btn" data-act="check">Ê™¢Êü•</button>
          <span class="msg"></span>
          <button class="btn" data-act="reveal">È°ØÁ§∫Á≠îÊ°à</button>
        </div>
        ${v.grammar ? `<div class="voc-gram">ÊñáÊ≥ïÔºö${esc(v.grammar)}</div>` : ``}
      `;

      // Âè≥ÔºöÁ≠îÊ°àÂç° + ÊúóËÆÄ
      const right = document.createElement('div');
      right.className = 'voc-right';
      right.innerHTML = `
        <div class="voc-word">
          <span>${esc(v.word||'')}</span>
          <button class="btn" data-act="speak" title="ÊúóËÆÄ üîä">üîä</button>
        </div>
        <div class="voc-pos">${esc(v.pos||'')}</div>
        ${v.zh ? `<div class="voc-zh">${esc(v.zh)}</div>` : ``}
        ${v.en ? `<div class="voc-en">${esc(v.en)}</div>` : ``}
        <div class="voc-actions">
          <button class="btn" data-act="jump">Ë∑≥Âà∞ÁâáÊÆµ</button>
        </div>
      `;

      // Ë°åÁÇ∫
      row.addEventListener('click', (e)=>{
        const act = e.target?.dataset?.act;
        if (!act) return;

        if (act==='jump'){ go(v.time||0); }
        else if (act==='speak'){ speak(v.word || v.en || v.example || v.zh || ''); }
        else if (act==='check'){
          const ipt = core.querySelector('input');
          const msg = core.querySelector('.msg');
          const ok = String(ipt.value||'').trim().toLowerCase()
                      === String(v.word||'').trim().toLowerCase();
          msg.textContent = ok ? '‚úÖ Ê≠£Á¢∫ÔºÅ' : '‚ùå ÂÜçË©¶Ë©¶';
          msg.className = `msg ${ok?'ok':'ng'}`;
        }
        else if (act==='reveal'){
          const ipt = core.querySelector('input');
          ipt.value = v.word||'';
          const msg = core.querySelector('.msg');
          msg.textContent = 'ÔºàÂ∑≤Â°´ÂÖ•Á≠îÊ°àÔºâ';
          msg.className = 'msg';
        }
      });

      // ÈªûÊôÇÈñìË∑≥Êí≠
      left.querySelector('.time-link').addEventListener('click', ()=> go(v.time||0));

      row.appendChild(left);
      row.appendChild(core);
      row.appendChild(right);
      listBox.appendChild(row);
    });
  }

  // =================== ÊéßÂà∂Âàó ===================
  if (speedRange) speedRange.addEventListener('input', ()=>{
    const r = Number(speedRange.value) || 1;
    video.playbackRate = r;
    if (speedVal) speedVal.textContent = `${r.toFixed(2)}x`;
  });

  btnPlay?.addEventListener('click', ()=>{ if(video.paused) video.play(); else video.pause(); });
  btnPrev?.addEventListener('click', ()=> seekTo(Math.max(0,currentIndex()-1),true));
  btnNext?.addEventListener('click', ()=> seekTo(Math.min(cues.length-1,currentIndex()+1),true));

  btnReplay?.addEventListener('click', ()=>{
    loopSentence = true;
    btnLoopSentence?.classList.add('green');
    seekTo(currentIndex(), true);
  });

  btnLoopSentence?.addEventListener('click', ()=>{
    loopSentence = !loopSentence;
    btnLoopSentence.classList.toggle('green', loopSentence);
  });

  btnAB?.addEventListener('click', ()=>{
    const now = video.currentTime + offset;
    if (abA === null) { abA = now; abB = null; btnAB.classList.add('green'); btnAB.textContent='üÖ± Ë®≠ÂÆö BÔºàÂÜçÊ¨°ÊåâÂèñÊ∂àÔºâ'; }
    else if (abB === null) { abB = now; if(abB<abA) [abA,abB]=[abB,abA]; btnAB.textContent='üÖ∞üÖ± A-B Âæ™Áí∞‰∏≠ÔºàÂÜçÊ¨°ÊåâÂèñÊ∂àÔºâ'; }
    else { abA = abB = null; btnAB.classList.remove('green'); btnAB.textContent='üÖ∞üÖ± A-B Âæ™Áí∞'; }
  });

  btnPointLoop?.addEventListener('click', ()=>{
    btnPointLoop.classList.toggle('green');
    if (cuesBody) cuesBody.dataset.pointloop = btnPointLoop.classList.contains('green') ? '1' : '';
  });

  btnClearLoop?.addEventListener('click', ()=>{
    loopSentence = false; abA = abB = null;
    btnLoopSentence?.classList.remove('green');
    btnAB?.classList.remove('green');
    if (btnAB) btnAB.textContent='üÖ∞üÖ± A-B Âæ™Áí∞';
  });

  btnFill?.addEventListener('click', ()=>{
    // ÂàáÊèõÂ°´ÊªøÔºö#videoWrap.fill
    videoWrap?.classList.toggle('fill');
  });

  btnOffsetMinus?.addEventListener('click', ()=>{ offset -= 0.5; if(offsetVal) offsetVal.textContent=`${offset.toFixed(1)}s`; });
  btnOffsetPlus ?.addEventListener('click', ()=>{ offset += 0.5; if(offsetVal) offsetVal.textContent=`${offset.toFixed(1)}s`; });
  chkFollow    ?.addEventListener('change', ()=> follow = chkFollow.checked);
  btnAutoPause ?.addEventListener('click', ()=>{ autoPause=!autoPause; btnAutoPause.classList.toggle('green',autoPause); });

  // Êí≠Êîæ‰∫ã‰ª∂ÔºàÈ´ò‰∫Æ„ÄÅÈÄêÂè•Êö´ÂÅú„ÄÅÂñÆÂè•Âæ™Áí∞„ÄÅA-B Âæ™Áí∞Ôºâ
  video.addEventListener('timeupdate', ()=>{
    if (!cues.length) return;
    const i = currentIndex();
    highlightRow(i);
    const t = video.currentTime + offset;

    if (autoPause) {
      const [, e] = sentenceRange(i);
      if (t >= e - 0.02 && t < e + 0.2) video.pause();
    }
    if (loopSentence) {
      const [s, e] = sentenceRange(i);
      if (t >= e - 0.02) {
        video.currentTime = Math.max(0, s - offset + 0.0001);
        video.play();
      }
    }
    if (abA !== null && abB !== null) {
      if (t < abA || t >= abB - 0.02) {
        video.currentTime = Math.max(0, abA - offset + 0.0001);
        video.play();
      }
    }
  });

  // ÂàÜÈ†ÅÂàáÊèõ
  tabs.forEach(tab=>{
    tab.addEventListener('click', ()=>{
      tabs.forEach(x=>x.classList.remove('active'));
      tab.classList.add('active');
      const name = tab.dataset.tab;
      if (paneSub)   paneSub.style.display   = (name==='sub')  ? '' : 'none';
      if (paneQuiz)  paneQuiz.style.display  = (name==='quiz') ? '' : 'none';
      if (paneVocab) paneVocab.style.display = (name==='vocab')? '' : 'none';
    });
  });

  // ÂïüÂãï
  (async function init(){
    const r = Number(speedRange?.value) || 1;
    video.playbackRate = r;
    if (speedVal) speedVal.textContent = `${r.toFixed(2)}x`;
    await loadAll();
  })();
})();
/* === QUIZ PATCH: auto-mount DOM + load/render quiz === */

/** ‰æùÂàÜÊï∏ÂõûÂÇ≥ËÄÅÂ∏´Ë©ïË™ûÔºàÊªøÂàÜÊúâÁâπÂà•Ë®äÊÅØÔºâ */
function teacherComment(score, total){
  const pct = Math.round((score/total)*100);
  if (pct === 100) {
    return "ÊªøÂàÜÔºÅÂ§™Âº∑‰∫ÜÔºÅÈõÜÊªø‰∫îÂºµÊªøÂàÜÂèØÂÖåÊèõ‰∏ÄÁµÑ LINE Ë°®ÊÉÖË≤º üéâ";
  }
  if (pct >= 90) return "ÈùûÂ∏∏Â•ΩÔºÅÂπæ‰πéÂÖ®Â∞çÔºåÁ∂≠ÊåÅÈÄôÂÄãÁØÄÂ•èÔΩû";
  if (pct >= 80) return "Ë°®ÁèæÂæàÁ©©ÔºÅÂÜçÊääÁ¥∞ÁØÄË£úÂº∑Â∞±Êõ¥Ê£í‰∫Ü„ÄÇ";
  if (pct >= 70) return "‰∏çÈåØÔºÅÂÜçÁ∑¥Á∑¥Â∏∏ÈåØÈ°åÔºå‰∏ã‰∏ÄÊ¨°ÂèØ‰ª•Êõ¥Â•Ω„ÄÇ";
  if (pct >= 60) return "ÂèäÊ†ºÔºÅÊåÅÁ∫åË§áÁøíÈáçÈªûÂñÆÂ≠óËàáÁâáË™û„ÄÇ";
  return "ÈÇÑÂ∑Æ‰∏ÄÈªûÈªûÔΩû Âª∫Ë≠∞ÂõûÊîæÂΩ±ÁâáÊâæÂá∫ÈóúÈçµÂè•ÔºåÂÜçÂÅö‰∏ÄÊ¨°Ê∏¨È©óÔºÅ";
}

/** Ëã•Ê∏¨È©óÂàÜÈ†ÅÁº∫Â∞ëÂøÖË¶ÅÁØÄÈªûÔºåÂãïÊÖãÂª∫Á´ã */
function ensureQuizDOM(){
  const pane = document.querySelector('#pane-quiz');
  if (!pane) return null;

  // Ê∏ÖÊéâ„ÄåÂ∞öÊú™ËºâÂÖ•„ÄçÂ∞èÊèêÁ§∫
  const badge = pane.querySelector('.muted');
  if (badge && /Â∞öÊú™ËºâÂÖ•/.test(badge.textContent)) badge.remove();

  // Êâæ‰∏çÂà∞Â∞±Âª∫Á´ãÔºöÊéßÂà∂Âàó + È°åÁõÆÂÆπÂô®
  if (!pane.querySelector('#quizControls')){
    const ctrl = document.createElement('div');
    ctrl.id = 'quizControls';
    ctrl.style.cssText = 'margin:8px 0 12px; display:flex; gap:8px; align-items:center; flex-wrap:wrap;';
    ctrl.innerHTML = `
      <button class="btn" id="btnSubmitQuiz">‰∫§Âç∑</button>
      <button class="btn" id="btnPrintQuiz" style="display:none">ÂàóÂç∞ÊàêÁ∏æÂñÆ</button>
      <button class="btn" id="btnShowAnswer" style="display:none">È°ØÁ§∫Á≠îÊ°à</button>
      <span id="quizMeta" style="color:#9fb3ff"></span>
    `;
    pane.appendChild(ctrl);
  }
  if (!pane.querySelector('#quizList')){
    const list = document.createElement('ol');
    list.id = 'quizList';
    list.style.lineHeight = '1.7';
    list.style.paddingLeft = '1.2em';
    pane.appendChild(list);
  }
  if (!pane.querySelector('#quizResult')){
    const res = document.createElement('div');
    res.id = 'quizResult';
    res.style.cssText = 'display:none; margin:10px 0; padding:10px; border:1px solid #203057; border-radius:10px; background:#0f1a33';
    res.innerHTML = `
      <div id="quizScore" style="font-weight:700; margin-bottom:6px"></div>
      <div id="quizTeacher" style="color:#9fb3d9"></div>
    `;
    pane.insertBefore(res, pane.querySelector('#quizList'));
  }
  return pane;
}

/** Â∞áÈ°åÂ∫´ËΩâÊàêÁµ±‰∏ÄÊ†ºÂºè */
function normalizeQuestion(q, idx){
  return {
    id: idx + 1,
    type: (q.type || '').toLowerCase() || (Array.isArray(q.options) ? 'mcq' : 'sa'),
    question: q.question || q.q || '',
    options: q.options || q.choices || [],
    answer: (q.answer ?? q.ans ?? '').toString(),
    explanation: q.explanation || q.ex || ''
  };
}

/** ËºâÂÖ•È°åÂ∫´ */
async function fetchQuiz(slug){
  try{
    const r = await fetch(`./data/quiz-${slug}.json`, {cache:'no-store'});
    if(!r.ok) throw 0;
    const raw = await r.json();
    return (raw || []).map(normalizeQuestion);
  }catch(e){
    console.warn('[quiz] load fail:', e);
    return [];
  }
}

/** Ê∏≤ÊüìÊ∏¨È©ó */
async function mountQuiz(){
  const host = ensureQuizDOM();
  if (!host){
    console.warn('[quiz] pane-quiz not found');
    return;
  }
  const list = host.querySelector('#quizList');
  const meta = host.querySelector('#quizMeta');
  const btnSubmit = host.querySelector('#btnSubmitQuiz');
  const btnPrint  = host.querySelector('#btnPrintQuiz');
  const btnAns    = host.querySelector('#btnShowAnswer');
  const boxResult = host.querySelector('#quizResult');
  const elScore   = host.querySelector('#quizScore');
  const elTeacher = host.querySelector('#quizTeacher');

  list.innerHTML = '<li class="muted">È°åÁõÆËºâÂÖ•‰∏≠‚Ä¶</li>';

  // ‰æù URL ÂèñÂæó slugÔºà‰Ω†ÁöÑÊ™îÈ†≠Â∑≤Á∂ìÊúâ params ‰∫ÜÔºåÁõ¥Êé•Ê≤øÁî®Ôºâ
  const params = new URLSearchParams(location.search);
  const slug = params.get('slug') || 'mid-autumn';

  const questions = await fetchQuiz(slug);
  if (!questions.length){
    list.innerHTML = `<li class="muted">Êü•ÁÑ°È°åÂ∫´Ôºà./data/quiz-${slug}.jsonÔºâ</li>`;
    meta.textContent = '';
    return;
  }

  // ÁãÄÊÖãÔºö‰ΩøÁî®ËÄÖ‰ΩúÁ≠îÔºàMap: id -> userAnsÔºâ
  const answers = new Map();

  // È°åÁõÆÊï∏
  meta.textContent = `ÂÖ± ${questions.length} È°åÔºàÂñÆÈÅ∏ÔºèÁ∞°Á≠îÔºâ`;

  // Áî¢ÁîüÊØèÈ°å UI
  list.innerHTML = '';
  questions.forEach(q=>{
    const li = document.createElement('li');
    li.style.marginBottom = '18px';
    li.innerHTML = `
      <div style="font-weight:700; margin-bottom:8px">${escapeHtml(q.question)}</div>
      <div class="q-body"></div>
      <div class="q-msg"  style="margin-top:6px;display:none"></div>
      <div class="q-ans"  style="margin-top:4px;color:#9fb3d9;display:none">Ê≠£Ëß£Ôºö</div>
      ${q.explanation ? `<div class="q-exp" style="margin-top:4px;color:#9fb3d9;display:none">Ëß£ÊûêÔºö${escapeHtml(q.explanation)}</div>` : ''}
    `;
    const body = li.querySelector('.q-body');
    const msg  = li.querySelector('.q-msg');
    const ans  = li.querySelector('.q-ans');

    if (q.type === 'mcq'){
      // ÂñÆÈÅ∏
      q.options.forEach(opt=>{
        const id = `q${q.id}_${Math.random().toString(36).slice(2,6)}`;
        const row = document.createElement('div');
        row.innerHTML = `
          <label style="display:flex;align-items:center;gap:8px;cursor:pointer">
            <input type="radio" name="q${q.id}" id="${id}" value="${escapeHtml(opt)}"/>
            <span>${escapeHtml(opt)}</span>
          </label>`;
        const ipt = row.querySelector('input');
        ipt.addEventListener('change', ()=>{
          answers.set(q.id, ipt.value);
          // Á´ãÂàªÂà§Êñ∑Â∞çÈåØÔºàÂÉÖÈ°ØÁ§∫ÂãæÂèâÔºåÊ≠£Ëß£ÊñáÂ≠óÁ≠â‰∫§Âç∑ÊàñÊåâÈ°ØÁ§∫Á≠îÊ°àÔºâ
          const ok = ipt.value.trim().toLowerCase() === q.answer.trim().toLowerCase();
          msg.style.display='block';
          msg.textContent = ok ? '‚úÖ Ê≠£Á¢∫' : '‚ùå ÈåØË™§';
          msg.style.color = ok ? '#5bd3c7' : '#ff6b6b';
        });
        body.appendChild(row);
      });
    }else{
      // Á∞°Á≠î
      const wrap = document.createElement('div');
      wrap.style.display='flex'; wrap.style.gap='8px'; wrap.style.alignItems='center';
      wrap.innerHTML = `
        <input type="text" class="ipt" placeholder="Ëº∏ÂÖ•Á≠îÊ°à‚Ä¶" 
               style="padding:8px 10px;border:1px solid #334155;border-radius:8px;background:#0f223b;color:#dbe7ff;min-width:260px"/>
        <button class="btn check">Ê™¢Êü•</button>`;
      const ipt = wrap.querySelector('.ipt');
      const btn = wrap.querySelector('.check');
      btn.addEventListener('click', ()=>{
        const val = ipt.value.trim();
        answers.set(q.id, val);
        const ok = val.toLowerCase() === q.answer.trim().toLowerCase();
        msg.style.display='block';
        msg.textContent = ok ? '‚úÖ Ê≠£Á¢∫' : '‚ùå ÈåØË™§';
        msg.style.color = ok ? '#5bd3c7' : '#ff6b6b';
        ipt.style.borderColor = ok ? '#5bd3c7' : '#ff6b6b';
      });
      body.appendChild(wrap);
    }

    // Â≠òÊîæÊ≠£Ëß£Â≠ó‰∏≤Ôºà‰∫§Âç∑ÊàñÊåâÈ°ØÁ§∫Á≠îÊ°àÊâçÊâìÈñãÔºâ
    ans.dataset.answer = q.answer;
    list.appendChild(li);
  });

  // ‰∫§Âç∑ÔºöË®àÂàÜ + Ë©ïË™û + È°ØÁ§∫ÂàóÂç∞/È°ØÁ§∫Á≠îÊ°àÊåâÈàï
  btnSubmit.onclick = ()=>{
    let correct = 0;
    const items = [...list.children];

    items.forEach((li, i)=>{
      const q = questions[i];
      const user = (answers.get(q.id) || '').toString().trim();
      const ok = user.toLowerCase() === q.answer.trim().toLowerCase();

      const msg = li.querySelector('.q-msg');
      const ans = li.querySelector('.q-ans');

      msg.style.display='block';
      msg.textContent = ok ? '‚úÖ Ê≠£Á¢∫' : (user ? '‚ùå ÈåØË™§' : '‚ùå Êú™‰ΩúÁ≠î');
      msg.style.color = ok ? '#5bd3c7' : '#ff6b6b';

      // ‰∫§Âç∑ÂæåÈ°ØÁ§∫Ê≠£Ëß£
      ans.style.display='block';
      ans.textContent = 'Ê≠£Ëß£Ôºö' + (ans.dataset.answer || '');
      const exp = li.querySelector('.q-exp');
      if (exp) exp.style.display='block';

      if (ok) correct++;
    });

    const total = questions.length;
    const score = correct * 5; // ÊØèÈ°å 5 ÂàÜÔºåÁ∏ΩÂàÜ 100

    elScore.textContent = `‰Ω†ÁöÑÂàÜÊï∏Ôºö${score} / 100`;
    elTeacher.textContent = teacherComment(score, 100);
    boxResult.style.display = 'block';
    btnPrint.style.display = 'inline-block';
    btnAns.style.display   = 'inline-block';
  };

  // È°ØÁ§∫Á≠îÊ°àÔºà‰∏çËÆäÊõ¥ÂàÜÊï∏Ôºâ
  btnAns.onclick = ()=>{
    [...list.children].forEach(li=>{
      const ans = li.querySelector('.q-ans');
      if (ans){
        ans.style.display='block';
        if (!ans.textContent || ans.textContent === 'Ê≠£Ëß£Ôºö')
          ans.textContent = 'Ê≠£Ëß£Ôºö' + (ans.dataset.answer || '');
      }
      const exp = li.querySelector('.q-exp');
      if (exp) exp.style.display='block';
    });
  };

  // ÂàóÂç∞ÊàêÁ∏æÂñÆÔºàA4 Áõ¥ÂºèÔºâ
  btnPrint.onclick = ()=>{
    const w = window.open('', '_blank');
    const logo = '(È†êÁïô Logo)';     // ‰Ω†Ë¶ÅÁöÑ Logo ÂèØÊîπÊàêÊú¨Âú∞ÂúñÊ™î <img src="...">
    const brand = 'ÂÖ¨Âè∏ÂêçÁ®±';        // ÊàñÂæû‰Ω†ÁöÑË®≠ÂÆöÂ∏∂ÂÖ•
    const scoreText = elScore.textContent || '';
    const teacherText = elTeacher.textContent || '';

    const rows = [...list.children].map((li, i)=>{
      const q = questions[i];
      const ans = li.querySelector('.q-ans')?.dataset.answer || q.answer || '';
      const exp = q.explanation ? `<div class="exp">Ëß£ÊûêÔºö${escapeHtml(q.explanation)}</div>` : '';
      return `
        <div class="q">
          <div class="qt">${i+1}. ${escapeHtml(q.question)}</div>
          <div class="ans">Ê≠£Ëß£Ôºö${escapeHtml(ans)}</div>
          ${exp}
        </div>`;
    }).join('');

    w.document.write(`
      <html><head><meta charset="utf-8">
      <title>ÊàêÁ∏æÂñÆ ¬∑ ${escapeHtml(brand)}</title>
      <style>
        @page { size: A4 portrait; margin: 18mm; }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Noto Sans", "PingFang TC", "Microsoft JhengHei", sans-serif; color:#111; }
        header { display:flex; justify-content:space-between; align-items:center; margin-bottom:16px; }
        header .brand { font-weight:700; font-size:20px; }
        .score { font-size:16px; margin:8px 0 16px; }
        .q { page-break-inside: avoid; margin: 12px 0; }
        .qt { font-weight:700; }
        .ans { color:#333; margin-top:4px; }
        .exp { color:#666; margin-top:2px; }
        hr { border:none; border-top:1px solid #ccc; margin: 12px 0; }
      </style>
      </head><body>
        <header>
          <div class="brand">${escapeHtml(brand)}</div>
          <div>${escapeHtml(logo)}</div>
        </header>
        <div class="score">
          ${escapeHtml(scoreText)}<br/>
          ${escapeHtml(teacherText)}
        </div>
        <hr/>
        ${rows}
      </body></html>
    `);
    w.document.close();
    w.focus();
    w.print();
  };
}

/** ÂÆâÂÖ®ËΩâÁæ© */
function escapeHtml(t){
  return String(t ?? '')
    .replaceAll('&','&amp;')
    .replaceAll('<','&lt;')
    .replaceAll('>','&gt;');
}

/* Âú®‰Ω†ÁöÑ init/boot ÂÆåÊàê‰πãÂæåÂëºÂè´‰∏ÄÊ¨°ÔºàÁ¢∫‰øù pane Â≠òÂú®ÊôÇÂÜçÂè´Ôºâ */
document.addEventListener('DOMContentLoaded', ()=>{
  // Ëã•Êúâ tab=quizÔºåÂÖàÂàáÊèõÊ∏¨È©óÂàÜÈ†ÅÂÜçÊéõËºâ
  const p = new URLSearchParams(location.search);
  if ((p.get('tab') || '').toLowerCase() === 'quiz'){
    const btn = document.querySelector('.tab[data-tab="quiz"]');
    if (btn) btn.click();
  }
  // ‰∏çË´ñÂ¶Ç‰ΩïÈÉΩÂòóË©¶ËºâÂÖ•ÔºàÊâæ‰∏çÂà∞ DOM ÊúÉËá™ÂãïÂª∫Á´ãÔºâ
  setTimeout(mountQuiz, 0);
});











































































